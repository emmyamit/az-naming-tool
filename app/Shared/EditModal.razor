@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using Microsoft.AspNetCore.Html
@inject IJSRuntime JsRuntime
@inject IToastService toastService
@inject ILogger<EditModal> Logger
@inject StateContainer state

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content @theme.ThemeStyle">
            <div class="modal-header bg-navcolor text-white">
                <h3 class="modal-title">@title</h3>
            </div>
            <div class="modal-body">
                <p>
                    @((MarkupString)message)
                </p>
                <div class="form-group">
                    <p>
                        <label for="name"><strong>Name</strong></label>
                    </p>
                    <p>
                        @if (protectedName)
                        {
                            <input title="Name" value="@itemName" disabled type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                        }
                        else
                        {
                            <input title="Name" value="@itemName" type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                        }
                    </p>
                </div>

                <div class="form-group">
                    <p>
                        <label for="shortName"><strong>Short Name</strong></label>
                    </p>
                    <p>
                        <input title="Short Name" value="@itemShortName" type="text" class="form-control @theme.ThemeStyle" id="shortname" @onchange="@((ui) => { itemShortName = (string)ui.Value;})" />
                    </p>
                </div>
                @if ((type == "ResourceType") && (resourceComponents != null))
                {
                    <div class="form-group">
                        <p>
                            <strong>Optional Components</strong>
                        </p>
                        <p>
                            @foreach (ResourceComponent resourceComponent in resourceComponents)
                            {
                                if (resourceComponent.Name != "ResourceType")
                                {
                                    <div class="form-check">
                                        @if (optional.ToLower().Contains(resourceComponent.Name.Replace("Resource", "").ToLower()))
                                        {
                                            <input title="Optional Component" class="form-check-input" type="checkbox" value="" id="optional-@resourceComponent.Name.Replace("Resource", "").ToLower()" checked>
                                            <label class="form-check-label" for="optional-@resourceComponent.Name.Replace("Resource", "").ToLower()">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                        else
                                        {
                                            <input title="Optional Component" class="form-check-input" type="checkbox" value="" id="optional-@resourceComponent.Name.Replace("Resource", "").ToLower()">
                                            <label class="form-check-label" for="optional-@resourceComponent.Name.Replace("Resource", "").ToLower()">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                    </div>
                                }
                            }
                        </p>
                    </div>

                    <div class="form-group">
                        <p>
                            <strong>Excluded Components</strong>
                        </p>
                        <p>
                            @foreach (ResourceComponent resourceComponent in resourceComponents)
                            {
                                @if (resourceComponent.Name != "ResourceType")
                                {
                                    <div class="form-check">
                                        @if (exclude.ToLower().Contains(resourceComponent.Name.Replace("Resource", "").ToLower()))
                                        {
                                            <input title="Excluded Component" class="form-check-input" type="checkbox" id="exclude-@resourceComponent.Name.Replace("Resource", "").ToLower()" checked>
                                            <label class="form-check-label" for="exclude-@resourceComponent.Name.Replace("Resource", "").ToLower()">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                        else
                                        {
                                            <input title="Excluded Component" class="form-check-input" type="checkbox" id="exclude-@resourceComponent.Name.Replace("Resource", "").ToLower()">
                                            <label class="form-check-label" for="exclude-@resourceComponent.Name.Replace("Resource", "").ToLower()">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                    </div>
                                }
                            }
                        </p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button title="Save" @onclick="Save" class="btn btn-success">Update</button>
                <button title="Cancel" @onclick="ModalInstance.CancelAsync" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public ThemeInfo theme { get; set; }

    [Parameter] public int id { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public string message { get; set; }
    [Parameter] public string type { get; set; }
    [Parameter] public bool protectedName { get; set; }


    private ServiceResponse serviceResponse = new();
    private string? itemName;
    private string? itemShortName;
    private List<ResourceComponent> resourceComponents;
    private string? optional;
    private string? exclude;
    private bool ischecked = false;

    protected override async void OnInitialized()
    {
        switch (type)
        {
            case "ResourceEnvironment":
                serviceResponse = await ResourceEnvironmentService.GetItem(id);
                ResourceEnvironment resourceEnvironment = (ResourceEnvironment)serviceResponse.ResponseObject;
                itemName = resourceEnvironment.Name;
                itemShortName = resourceEnvironment.ShortName;
                break;
            case "ResourceLocation":
                serviceResponse = await ResourceLocationService.GetItem(id);
                ResourceLocation resourceLocation = (ResourceLocation)serviceResponse.ResponseObject;
                itemName = resourceLocation.Name;
                itemShortName = resourceLocation.ShortName;
                break;
            case "ResourceOrg":
                serviceResponse = await ResourceOrgService.GetItem(id);
                ResourceOrg resourceOrg = (ResourceOrg)serviceResponse.ResponseObject;
                itemName = resourceOrg.Name;
                itemShortName = resourceOrg.ShortName;
                break;
            case "ResourceProjAppSvc":
                serviceResponse = await ResourceProjAppSvcService.GetItem(id);
                ResourceProjAppSvc resourceProjAppSvc = (ResourceProjAppSvc)serviceResponse.ResponseObject;
                itemName = resourceProjAppSvc.Name;
                itemShortName = resourceProjAppSvc.ShortName;
                break;
            case "ResourceType":
                serviceResponse = await ResourceTypeService.GetItem(id);
                ResourceType resourceType = (ResourceType)serviceResponse.ResponseObject;
                itemName = resourceType.Resource;
                itemShortName = resourceType.ShortName;
                optional = resourceType.Optional;
                exclude = resourceType.Exclude;
                serviceResponse = await ResourceComponentService.GetItems(true);
                resourceComponents = (List<ResourceComponent>)serviceResponse.ResponseObject;
                resourceComponents = resourceComponents.OrderBy(x => x.Name).Where(y => y.Enabled).ToList();
                break;
            case "ResourceUnitDept":
                serviceResponse = await ResourceUnitDeptService.GetItem(id);
                ResourceUnitDept resourceUnitDept = (ResourceUnitDept)serviceResponse.ResponseObject;
                itemName = resourceUnitDept.Name;
                itemShortName = resourceUnitDept.ShortName;
                break;
            case "ResourceFunction":
                serviceResponse = await ResourceFunctionService.GetItem(id);
                ResourceFunction resourceFunction = (ResourceFunction)serviceResponse.ResponseObject;
                itemName = resourceFunction.Name;
                itemShortName = resourceFunction.ShortName;
                break;
        }
    }

    async void Save()
    {
        if ((itemName != "") && (itemShortName != ""))
        {
            if (GeneralHelper.ValidateShortName(itemShortName, type))
            {
                switch (type)
                {
                    case "ResourceEnvironment":
                        serviceResponse = await ResourceEnvironmentService.GetItem(id);
                        ResourceEnvironment resourceEnvironment = (ResourceEnvironment)serviceResponse.ResponseObject;
                        resourceEnvironment.Name = itemName;
                        resourceEnvironment.ShortName = itemShortName;
                        serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                        break;
                    case "ResourceLocation":
                        serviceResponse = await ResourceLocationService.GetItem(id);
                        ResourceLocation resourceLocation = (ResourceLocation)serviceResponse.ResponseObject;
                        resourceLocation.ShortName = itemShortName;
                        serviceResponse = await ResourceLocationService.PostItem(resourceLocation);
                        break;
                    case "ResourceOrg":
                        serviceResponse = await ResourceOrgService.GetItem(id);
                        ResourceOrg resourceOrg = (ResourceOrg)serviceResponse.ResponseObject;
                        resourceOrg.Name = itemName;
                        resourceOrg.ShortName = itemShortName;
                        serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                        break;
                    case "ResourceProjAppSvc":
                        serviceResponse = await ResourceProjAppSvcService.GetItem(id);
                        ResourceProjAppSvc resourceProjAppSvc = (ResourceProjAppSvc)serviceResponse.ResponseObject;
                        resourceProjAppSvc.Name = itemName;
                        resourceProjAppSvc.ShortName = itemShortName;
                        serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                        break;
                    case "ResourceType":
                        serviceResponse = await ResourceTypeService.GetItem(id);
                        ResourceType resourceType = (ResourceType)serviceResponse.ResponseObject;
                        resourceType.ShortName = itemShortName;
                        resourceType.Optional = "";
                        resourceType.Exclude = "";

                        // Update the Optional and Exclude components
                        foreach (ResourceComponent resourceComponent in resourceComponents)
                        {
                            if (resourceComponent.Name != "ResourceType")
                            {
                                // Optional
                                ischecked = false;
                                ischecked = await JsRuntime.InvokeAsync<bool>("IsElementChecked", "optional-" + resourceComponent.Name.Replace("Resource", "").ToLower());
                                if (ischecked)
                                {
                                    if (resourceType.Optional != "")
                                    {
                                        resourceType.Optional += ",";
                                    }
                                    resourceType.Optional += resourceComponent.Name.Replace("Resource", "");
                                }

                                // Exclude
                                ischecked = false;
                                ischecked = await JsRuntime.InvokeAsync<bool>("IsElementChecked", "exclude-" + resourceComponent.Name.Replace("Resource", "").ToLower());
                                if (ischecked)
                                {
                                    if (resourceType.Exclude != "")
                                    {
                                        resourceType.Exclude += ",";
                                    }
                                    resourceType.Exclude += resourceComponent.Name.Replace("Resource", "");
                                }
                            }
                        }

                        serviceResponse = await ResourceTypeService.PostItem(resourceType);
                        break;
                    case "ResourceUnitDept":
                        serviceResponse = await ResourceUnitDeptService.GetItem(id);
                        ResourceUnitDept resourceUnitDept = (ResourceUnitDept)serviceResponse.ResponseObject;
                        resourceUnitDept.Name = itemName;
                        resourceUnitDept.ShortName = itemShortName;
                        serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                        break;
                    case "ResourceFunction":
                        serviceResponse = await ResourceFunctionService.GetItem(id);
                        ResourceFunction resourceFunction = (ResourceFunction)serviceResponse.ResponseObject;
                        resourceFunction.Name = itemName;
                        resourceFunction.ShortName = itemShortName;
                        serviceResponse = await ResourceFunctionService.PostItem(resourceFunction);
                        break;
                }

                if (serviceResponse.Success)
                {
                    ModalInstance.CloseAsync();
                    toastService.ShowSuccess(type.Replace("Resource", "Resource ") + " updated!", "SUCCESS");
                    LogHelper.LogAdminMessage("SUCCESS", "(" + type + ") " + itemName + " updated!");
                }
                else
                {
                    toastService.ShowError("There was an error updating the " + type.Replace("Resource", "Resource ") + "!", "ERROR");
                }
            }
            else
            {
                toastService.ShowError("You must enter a valid short name!", "ERROR");
            }
        }
        else
        {
            toastService.ShowError("You must enter a name and short name!", "ERROR");
        }
    }

    async Task Cancel() => await ModalInstance.CancelAsync();
}