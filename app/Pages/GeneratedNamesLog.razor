@page "/generatednameslog"
@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using System.IO
@using BlazorDownloadFile
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@inject ILogger<Configuration> Logger
@inject IJSRuntime JsRuntime
@inject IConfiguration _config
@inject StateContainer state
@inject ProtectedSessionStorage session
@inject IToastService toastService
@implements IDisposable
@inject NavigationManager NavigationManager

<PageTitle>Azure Naming Tool - Generated Names Log</PageTitle>
<div class="card  @theme.ThemeStyle">
    <div class="card-body">
        <h1>Generated Names Log</h1>
        <div class="mb-3">This page displays a log of generated resouce type names.</div>

        @if (!dataLoaded)
        {
            <div class="spinner-border blue" role="status">
                <span class="sr-only"></span>
            </div>
        }
        else
        {
            <div class="mb-3">
                @if (lstNameRequests.Count > 0)
                {
                    @if (admin)
                    {
                        <div class="mb-3">
                            <button class="btn btn-primary" title="Export Generated Names Log" @onclick="@(e => OnExportLogClick())">
                                Export Generated Names Log
                            </button>
                            <button class="btn btn-danger" title="Purge Generated Names Log" @onclick="@(e => OnPurgeLogClick())">
                                Purge Generated Names Log
                            </button>
                        </div>
                    }
                    <div class="table-responsive">
                        <table class="table @theme.ThemeStyle">
                            <thead>
                                <tr>
                                    <th scope="col">Created On</th>
                                    <th scope="col">Generated Name</th>
                                    <th scope="col">Components</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (GeneratedName nameRequest in lstNameRequests)
                                {
                                    <tr>
                                        <td class="align-top">
                                            @nameRequest.CreatedOn.ToString()
                                        </td>
                                        <td class="align-top">
                                            @nameRequest.ResourceName
                                        </td>
                                        <td class="align-top">
                                            @foreach (string[] component in nameRequest.Components.ToList<string[]>())
                                            {
                                                <div style="line-break:anywhere;">
                                                    @component[0] : @component[1]
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p style="font-style:italic">
                        There are no log items to display.
                    </p>
                }
            </div>
        }
    </div>
</div>

@code {
    
    [CascadingParameter]
    protected ThemeInfo? theme { get; set; }
    private bool admin;
    private bool dataLoaded = false;
    List<GeneratedName> lstNameRequests = new();
    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await session.GetAsync<bool>("admin");
            admin = (bool)result.Value;
            lstNameRequests = await LogHelper.GetGeneratedNames();
            dataLoaded = true;
            StateHasChanged();
        }
    }


    private async Task OnInstructionsClick()
    {
        NavigationManager.NavigateTo("/instructions");
    }


    public void Dispose()
    {
        StateHasChanged();
    }

    private async Task OnPurgeLogClick()
    {
        bool confirm = false;
        confirm = await JsRuntime.InvokeAsync<bool>("confirm", "This will purge the Generated Names log. Are you sure?");
        if (confirm)
        {
            await LogHelper.PurgeGeneratedNames();
            toastService.ShowSuccess("Generated Log purged!", "SUCCESS");
            LogHelper.LogAdminMessage("GENERATED NAMES LOG", "Generated Names log purged.");
            lstNameRequests = await LogHelper.GetGeneratedNames();
            StateHasChanged();
        }
    }

    private async Task OnExportLogClick()
    {
        await JsRuntime.InvokeVoidAsync("htmlToCSV", "generatednameslog.csv");
    }
}
